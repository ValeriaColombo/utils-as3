package vale.utils{	// ====================================================================	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.IBitmapDrawable;	import flash.display.Sprite;	import flash.geom.Rectangle;

	// ====================================================================		public class Utils 	{		// --------------------------------------------------------------------		public static function rndIntBetween(from : int, to : int):int		{			return from + Math.round(Math.random()*(to-from));		}				// --------------------------------------------------------------------		public static function rndInt():int		{			return Math.round(Math.random()*1000000);		}				// --------------------------------------------------------------------		public static function duplicateDisplayObject(target:DisplayObject, autoAdd:Boolean = false):DisplayObject 		{			// create duplicate			var targetClass:Class = Object(target).constructor;			var duplicate:DisplayObject = new targetClass();						// duplicate properties			duplicate.transform = target.transform;			duplicate.filters = target.filters;			duplicate.cacheAsBitmap = target.cacheAsBitmap;			duplicate.opaqueBackground = target.opaqueBackground;			if (target.scale9Grid) 			{				var rect:Rectangle = target.scale9Grid;				// WAS Flash 9 bug where returned scale9Grid is 20x larger than assigned				// rect.x /= 20, rect.y /= 20, rect.width /= 20, rect.height /= 20;				duplicate.scale9Grid = rect;			}						// add to target parent's display list			// if autoAdd was provided as true			if (autoAdd && target.parent)			{				target.parent.addChild(duplicate);			}			return duplicate;		}			// --------------------------------------------------------------------		public static function duplicateImageAsSprite(original:DisplayObject):Sprite		{			var bitmapData:BitmapData = new BitmapData(original.width, original.height,	true, 0x000000);			bitmapData.draw(original as IBitmapDrawable);					var bitmap:Bitmap = new Bitmap(bitmapData);					var returnSprite:Sprite = new Sprite();			returnSprite.addChild(bitmap as DisplayObject);					return returnSprite;		}		// --------------------------------------------------------------------		public static function removeFirstAppearence(arr : Array, val)		{			var i = arr.indexOf(val);			arr.splice(i,1);		}	}}